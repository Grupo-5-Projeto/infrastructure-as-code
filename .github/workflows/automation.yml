name: CI
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  infra-as-code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ORG }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ORG }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN_ORG }}
          aws-region: ${{ secrets.AWS_REGION_ORG }}

      - name: deploy cloudformation
        uses: aws-actions/aws-cloudformation-github-deploy@v1.2.0
        with:
          name: arquitetura-upa-atualizada
          template: cloudformation.yaml
          no-fail-on-empty-changeset: 1
          no-execute-changeset: 1
      
  call-lambdas-workflow:
    needs: infra-as-code
    uses: Grupo-5-Projeto/lambdas/.github/workflows/deploy.yml@main
    secrets: inherit

  instances-config:
    needs: infra-as-code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ORG }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ORG }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN_ORG }}
          aws-region: ${{ secrets.AWS_REGION_ORG }}

      - name: get ec2 public ip
        run: |
          EC2_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=arquitetura-upa-atualizada-sptech" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
      
      - name: update inventory
        run: |
          echo "[ec2]" > inventory
          echo "${{env.EC2_IP}} ansible_user=ec2-user ansible_ssh_private_key_file=./urubu100-key.pem" >> inventory
          cat inventory

      - name: key
        run: |
          echo "${{ secrets.KEY_PEM_ORG }}" > urubu100-key.pem
          chmod 400 urubu100-key.pem

      - name: set credentials .env
        run: |
          cd ./docker
          echo "ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY_ID_ORG }}" > .env
          echo "SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_ORG }}" >> .env
          echo "SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN_ORG }}" >> .env

      - name: copy archives to instace
        run: |
          ls
          scp -i ./urubu100-key.pem -o StrictHostKeyChecking=no ./docker{*,.*} ec2-user@${{env.EC2_IP}}:/home/ec2-user/docker

      - name: configure instances
        working-directory: ansible
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          ansible-playbook -i inventory playbook.yaml